name: CI-Windows

on:
  workflow_dispatch:
  push:
    # branches:
    # - master
    # Sequence of patterns matched against refs/tags
    tags:
      - '*' # Push events to matching any tags
jobs:
  build:
    # 见 https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: windows-latest
    strategy:
      matrix:
        # electron-23.2.1对应node版本为18.12.1
        # 见https://releases.electronjs.org/
        node-version: ['18.12.1']

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      # 获取package.json中的版本号, 方便后续处理
      - name: Read package.json
        uses: myrotvorets/info-from-package-json-action@1.0.0
        id: get-version-from-package-json
      - name: Show version number
        run: echo "current version is ${{ steps.get-version-from-package-json.outputs.packageVersion }}"
      - run: cd ./client ; pnpm install --frozen-lockfile ; cd ..
      - run: pnpm install --frozen-lockfile
      - run: pnpm build-without-sourcemap
      - run: pnpm buildgui
      - run: pnpm electron-builder
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # 在setting中配置自定义环境变量, 参考[此处](https://help.github.com/cn/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets)
      - name: Create Release
        id: create_release
        uses: monkeyWie/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: win-${{ steps.get-version-from-package-json.outputs.packageVersion  }}
          release_name: windows-${{ steps.get-version-from-package-json.outputs.packageVersion  }}
          draft: true
          prerelease: true
      - name: Upload Release normal windows
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/知乎助手 Setup ${{ steps.get-version-from-package-json.outputs.packageVersion }}.exe
          asset_name: windows-zhihuhelp-win64-${{ steps.get-version-from-package-json.outputs.packageVersion }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable
